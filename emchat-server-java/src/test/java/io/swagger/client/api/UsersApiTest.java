/**
 * Easemob REST APIs
 * Easemob Server REST API Swagger is designated to provide better documentation and thorough interfaces for testing. For more details about server implementation, request rate limitation, etc, please visit [Easemob Server Integration](http://docs.easemob.com/im/100serverintegration/10intro).    **Note:**  `org_ID` is the unique ID of the organization created when you first registered [Easemob console](https://console.easemob.com/).                          `app_name` is the unique app ID created when you new application in [Easemob console](https://console.easemob.com/).            `Authorization token` is required for most API requests as part of requesting header in the format `Bearer ${token}`. You can obtain the token via [/{org_name}/{app_name}/token](https://docs.hyphenate.io/docs/server-overview#section-request-authentication-token).                                             
 *
 * OpenAPI spec version: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.*;
import io.swagger.client.util.TokenUtil;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    
    /**
     * Delete Users in Batch
     *
     * Delete total number of N user accounts in batch. Recommend set N range 100~500 at a time to ensure the performance. Cannot specified user account in deletion, check the response to see which user accounts are deleted.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgNameAppNameUsersDeleteTest() throws ApiException {
        String orgName = "1122161011178276";
        String appName = "testapp";
        String authorization = "Bearer YWMtnIF_ZI-GEea1KgfxnnDmKAAAAVjnsTKe0OE4vMOBWCtOcrB-56YcrhOHMho";
        String limit = "3";
        String cursor = null;
        // String response = api.orgNameAppNameUsersDelete(orgName, appName, authorization, limit, cursor);
        //System.out.println(response);
        // TODO: test validations
    }
    
    /**
     * Get Users in Batch
     *
     * Get a list of users
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgNameAppNameUsersGetTest() throws ApiException {
        String orgName = "1122161011178276";
        String appName = "testapp";
        String authorization = "Bearer YWMtnIF_ZI-GEea1KgfxnnDmKAAAAVjnsTKe0OE4vMOBWCtOcrB-56YcrhOHMho";
        String limit = "3";
        String cursor = null;
        //String response = api.orgNameAppNameUsersGet(orgName, appName, authorization, limit, cursor);
       // System.out.println(response);
        // TODO: test validations
    }
    
    /**
     * Unblock User(s)
     *
     * Unblock one or multiple users by removing them from blacklist. Max 60 users at a time. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgNameAppNameUsersOwnerUsernameBlocksUsersBlockedUsernameDeleteTest() throws ApiException {
        String orgName = null;
        String appName = null;
        String authorization = null;
        String ownerUsername = null;
        String blockedUsername = null;
        // String response = api.orgNameAppNameUsersOwnerUsernameBlocksUsersBlockedUsernameDelete(orgName, appName, authorization, ownerUsername, blockedUsername);

        // TODO: test validations
    }
    
    /**
     * Get a List of Blocked Users
     *
     * Get a List of Blocked Users by the user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgNameAppNameUsersOwnerUsernameBlocksUsersGetTest() throws ApiException {
        String orgName = null;
        String appName = null;
        String authorization = null;
        String ownerUsername = null;
        // String response = api.orgNameAppNameUsersOwnerUsernameBlocksUsersGet(orgName, appName, authorization, ownerUsername);

        // TODO: test validations
    }
    
    /**
     * Block User(s)
     *
     * Block one or multiple users by adding to blacklist. Blocked user cannot send message.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgNameAppNameUsersOwnerUsernameBlocksUsersPostTest() throws ApiException {
        String orgName = null;
        String appName = null;
        String authorization = null;
        String ownerUsername = null;
        UserNames usernames = null;
        // String response = api.orgNameAppNameUsersOwnerUsernameBlocksUsersPost(orgName, appName, authorization, ownerUsername, usernames);

        // TODO: test validations
    }
    
    /**
     * Remove Contact from User
     *
     * Remove contact from user&#39;s contact list. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgNameAppNameUsersOwnerUsernameContactsUsersFriendUsernameDeleteTest() throws ApiException {
        String orgName = null;
        String appName_ = null;
        String authorization = null;
        String ownerUsername = null;
        String friendUsername = null;
        //String response = api.orgNameAppNameUsersOwnerUsernameContactsUsersFriendUsernameDelete(orgName, appName_, authorization, ownerUsername, friendUsername);

        // TODO: test validations
    }
    
    /**
     * Add Contact for User
     *
     * Add contact for user. Contact to be added must under the same application as the user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgNameAppNameUsersOwnerUsernameContactsUsersFriendUsernamePostTest() throws ApiException {
        String orgName = null;
        String appName = null;
        String authorization = null;
        String ownerUsername = null;
        String friendUsername = null;
        //String response = api.orgNameAppNameUsersOwnerUsernameContactsUsersFriendUsernamePost(orgName, appName, authorization, ownerUsername, friendUsername);

        // TODO: test validations
    }
    
    /**
     * Get a List of Contacts
     *
     * Get user&#39;s contact list
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgNameAppNameUsersOwnerUsernameContactsUsersGetTest() throws ApiException {
        String orgName = null;
        String appName = null;
        String authorization = null;
        String ownerUsername = null;
        //String response = api.orgNameAppNameUsersOwnerUsernameContactsUsersGet(orgName, appName, authorization, ownerUsername);

        // TODO: test validations
    }
    
    /**
     * Get Offline Message Count
     *
     * Get the number of offline messages
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgNameAppNameUsersOwnerUsernameOfflineMsgCountGetTest() throws ApiException {
        String orgName = null;
        String appName = null;
        String authorization = null;
        String ownerUsername = null;
        //String response = api.orgNameAppNameUsersOwnerUsernameOfflineMsgCountGet(orgName, appName, authorization, ownerUsername);

        // TODO: test validations
    }
    
    /**
     * Create a User
     *
     * Register an IM user account respects to org and app keys.  Note: There&#39;re 2 types of registration, &#39;open&#39; and &#39;authorized&#39;. &#39;open&#39; registration does not require admin authentication, but &#39;authorized&#39; does. See the application -&gt; \&quot;overview\&quot; -&gt; \&quot;User Registration Permission\&quot; in Hyphenate console.  &#39;Authorized&#39; registration is recommended, which prevents malicious attempt to create junk user account from the ones obtained the URL. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgNameAppNameUsersPostTest() throws ApiException {
        String orgName = null;
        String appName = null;
        RegisterUsers body = null;
        String authorization = null;
       // String response = api.orgNameAppNameUsersPost(orgName, appName, body, authorization);

        // TODO: test validations
    }
    
    /**
     * Activate User Account
     *
     * Activate a deactivated user account. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgNameAppNameUsersUsernameActivatePostTest() throws ApiException {
        String orgName = null;
        String appName = null;
        String authorization = null;
        String username = null;
        //String response = api.orgNameAppNameUsersUsernameActivatePost(orgName, appName, authorization, username);

        // TODO: test validations
    }
    
    /**
     * Deactivate User Account
     *
     * Deactivate a user account. User will not be able to login. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgNameAppNameUsersUsernameDeactivatePostTest() throws ApiException {
        String orgName = null;
        String appName = null;
        String authorization = null;
        String username = null;
        //String response = api.orgNameAppNameUsersUsernameDeactivatePost(orgName, appName, authorization, username);

        // TODO: test validations
    }
    
    /**
     * Delete a User
     *
     * Warning: Delete a user will also delete the group and chat room if the specified user is the admin of the group and chat room. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgNameAppNameUsersUsernameDeleteTest() throws ApiException {
        String orgName = null;
        String appName = null;
        String authorization = null;
        String username = null;
        // String response = api.orgNameAppNameUsersUsernameDelete(orgName, appName, authorization, username);

        // TODO: test validations
    }
    
    /**
     * Logout User
     *
     * Force logout a user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgNameAppNameUsersUsernameDisconnectGetTest() throws ApiException {
        String orgName = null;
        String appName = null;
        String authorization = null;
        String username = null;
        //String response = api.orgNameAppNameUsersUsernameDisconnectGet(orgName, appName, authorization, username);

        // TODO: test validations
    }
    
    /**
     * Get a User
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgNameAppNameUsersUsernameGetTest() throws ApiException {
        String orgName = null;
        String appName = null;
        String authorization = null;
        String username = null;
        // String response = api.orgNameAppNameUsersUsernameGet(orgName, appName, authorization, username);

        // TODO: test validations
    }
    
    /**
     * Get a List of Groups of User Joined
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgNameAppNameUsersUsernameJoinedChatgroupsGetTest() throws ApiException {
        String orgName = null;
        String appName = null;
        String authorization = null;
        String username = null;
        //String response = api.orgNameAppNameUsersUsernameJoinedChatgroupsGet(orgName, appName, authorization, username);

        // TODO: test validations
    }
    
    /**
     * Get All the Chat Rooms of User Joined
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgNameAppNameUsersUsernameJoinedChatroomsGetTest() throws ApiException {
        String orgName = null;
        String appName = null;
        String authorization = null;
        String username = null;
        //String response = api.orgNameAppNameUsersUsernameJoinedChatroomsGet(orgName, appName, authorization, username);

        // TODO: test validations
    }
    
    /**
     * Get Offline Message Status
     *
     * Get offline message status via message ID. Get message ID via the method get message history.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgNameAppNameUsersUsernameOfflineMsgStatusMsgIdGetTest() throws ApiException {
        String orgName = null;
        String appName = null;
        String authorization = null;
        String username = null;
        String msgId = null;
        //String response = api.orgNameAppNameUsersUsernameOfflineMsgStatusMsgIdGet(orgName, appName, authorization, username, msgId);

        // TODO: test validations
    }
    
    /**
     * Reset User&#39;s Password
     *
     * To enhance security, we recommend update user&#39;s Hyphenate IM user account password if the user&#39;s app password on developer server is updated.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgNameAppNameUsersUsernamePasswordPutTest() throws ApiException {
        String orgName = null;
        String appName = null;
        String username = null;
        NewPassword body = null;
        String authorization = null;
        //String response = api.orgNameAppNameUsersUsernamePasswordPut(orgName, appName, username, body, authorization);

        // TODO: test validations
    }
    
    /**
     * Update User&#39;s APNs Display Name
     *
     * Update user&#39;s APNs display name for iOS push notification.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgNameAppNameUsersUsernamePutTest() throws ApiException {
        String orgName = null;
        String appName = null;
        String username = null;
        Nickname body = null;
        String authorization = null;
        //String response = api.orgNameAppNameUsersUsernamePut(orgName, appName, username, body, authorization);

        // TODO: test validations
    }
    
    /**
     * Get User Online Status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orgNameAppNameUsersUsernameStatusGetTest() throws ApiException {
        String orgName = null;
        String appName = null;
        String authorization = null;
        String username = null;
        // String response = api.orgNameAppNameUsersUsernameStatusGet(orgName, appName, authorization, username);

        // TODO: test validations
    }
    
}
